echo "# Code" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/engr101-team5/Code.git
git push -u origin master

#include <iostream>
#include "E101.h"

using namespace std;

class Robot{
private:
	int v_left, v_right, cam_tilt;
	int dv;
	double line_error;
	int quadrant;
	const int cam_width = 320;
	const int cam_height = 240;
	const int v_left_go = 52;
	const int v_right_go = 43;
	double kp = 0.05;
	int line_present = 1;

public:
	Rob(){} //default constructor
	int lnitHardware();
	void ReadSetMotors();
	void SetMotors();
	int MeasureLine();
	int FollowLine();
}
/*
int openGate(){
		
	int connect_to_server(char server_addr[15], int port);
	int send_to_server(char message[24]);
	int send_from_server(char mesage[24]);
}


*/

int Robot::MeasureLine(){
	int countr = 0; //rows
	int countc = 0; //columns 
	int pixel[320]; //array list 
	int index[int i];
	int error = 0;
	
	for(int i=0; i<320;i++){ //setting index with negative and positive numbers
		index[i]=i-160;
	}
	
	while(countr=60 || countr=120 || countr=180){ //we will count three error and average it to find the final amount of error. Easiest way
		countc=0;
		for(countc=0; countc<320; countc++){ //counting through the row 
			int red = get_pixel(countr, countc, 0);
			int green = get_pixel(countr, countc, 1); //getting the pixel colour
			int blue = get_pixel(countr, countc, 2);
			
			if((float)green<60 && (float)red<60 && (float)blue<60){ //if black set it as 1
				pixel[countc] = 1;
			}
			else if((float)green>180 && (float)red>180 && (float)blue>180){ //if white set it as 0
				pixel[countc] = 0;
			}
		}
		for(int n=0; n<360; n++){//going through both arrays and comparing
			error = error+index[n]*pixel[n];
		}
	}
	error_line = error/3.0;//averaging
}
	

int Robot::FollowLine(){
	MeasureLine();
	if(line_present){
		dv = (int)(line_error = kp);
		//dv = 0;
		v_left = v_left_go + dv;
		v_right = v_right_go + dv;
		cout<<" line_error = "<<line_error<<" dv="<<dv;
		SetMotors();
	}
	else{
		//go back
		cout<<" Line_missing"<<endl;
		v_left = 39;
		v_right = 55;
		SetMotors();
		sleep1(100);
	}
	return 0;
}
int main(){
	
	Robot robot;
	robot.lnitHardware();
	int count = 0;
	open_screen_stream();
	while(count < 5000) {
		robot.MeasureLine();
		robot.FollowLine();
		count++;
	}
	//save_picture("file1");
	close_screen_stream();
	stoph();
	return 0;
}

